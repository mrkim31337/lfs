pkgbuild_version=5
_pkgbase=gcc
pkgname="${_pkgbase}-pass1"
pkgver=6.3.0

_mpfr_ver=3.1.5
_gmp_ver=6.1.2
_mpc_ver=1.0.3

_info_pages=(
    'binutils.info'
    'ld.info'
    'bfd.info'
    'gprof.info'
    'as.info'
    'configure.info'
    'standards.info'
)

dependencies=(
    "!$pkgname"
	'binutils-pass1'
)
sources=(
    "http://ftp.gnu.org/gnu/${_pkgbase}/${_pkgbase}-${pkgver}/${_pkgbase}-${pkgver}.tar.bz2"
    "http://www.mpfr.org/mpfr-${_mpfr_ver}/mpfr-${_mpfr_ver}.tar.xz"
    "http://ftp.gnu.org/gnu/gmp/gmp-${_gmp_ver}.tar.xz"
    "http://www.multiprecision.org/mpc/download/mpc-${_mpc_ver}.tar.gz"
)
sha1sums=(
)


lfs_me_prepare() {
	tar -xf "${sources_dir}/${_pkgbase}-${pkgver}.tar.bz2" -C "$build_dir"

	cd "${build_dir}/${_pkgbase}-${pkgver}"

    tar -xf "${sources_dir}/mpfr-${_mpfr_ver}.tar.xz"
    mv -v "mpfr-${_mpfr_ver}" mpfr
    tar -xf "${sources_dir}/gmp-${_gmp_ver}.tar.xz"
    mv -v "gmp-${_gmp_ver/[a-z]/}" gmp
    tar -xf "${sources_dir}/mpc-${_mpc_ver}.tar.gz"
    mv -v "mpc-${_mpc_ver}" mpc

    #prepend /tools to path of dynamic loader
    for file in \
 $(find gcc/config -name linux64.h -o -name linux.h -o -name sysv4.h)
do
  cp -uv $file{,.orig}
  sed -e 's@/lib\(64\)\?\(32\)\?/ld@/tools&@g' \
      -e 's@/usr@/tools@g' $file.orig > $file
  echo '
#undef STANDARD_STARTFILE_PREFIX_1
#undef STANDARD_STARTFILE_PREFIX_2
#define STANDARD_STARTFILE_PREFIX_1 "/tools/lib/"
#define STANDARD_STARTFILE_PREFIX_2 ""' >> $file
  touch $file.orig
done

    #fix problem with stack protection
    #sed -i '/k prot/agcc_cv_libc_provides_ssp=yes' gcc/configure
    #fix problem detected upstream
    #sed -i 's/if \((code.*))\)/if (\1 \&\& \!DEBUG_INSN_P (insn))/' gcc/sched-deps.c

    mkdir -v "../${_pkgbase}-build"
    cd "../${_pkgbase}-build"

    [ ! -z $LFS ] && [ ! -z $LFS_TGT ] || lfs_me_error "LFS and LFS_TGT environment variables aren't set!" false

    "../${_pkgbase}-${pkgver}/configure"                               \
	--target=$LFS_TGT                              \
    --prefix=/tools                                \
    --with-glibc-version=2.11                      \
    --with-sysroot=$LFS                            \
    --with-newlib                                  \
    --without-headers                              \
    --with-local-prefix=/tools                     \
    --with-native-system-header-dir=/tools/include \
    --disable-nls                                  \
    --disable-shared                               \
    --disable-multilib                             \
    --disable-decimal-float                        \
    --disable-threads                              \
    --disable-libatomic                            \
    --disable-libgomp                              \
    --disable-libmpx                               \
    --disable-libquadmath                          \
    --disable-libssp                               \
    --disable-libvtv                               \
    --disable-libstdcxx                            \
    --enable-languages=c,c++
}

lfs_me_build() {
	cd "${build_dir}/${_pkgbase}-build"
    make
}

lfs_me_check() {
    return
}

lfs_me_install() {
	cd "${build_dir}/${_pkgbase}-build"
	make DESTDIR="$fakeroot_dir" install

    #fix for 2nd pass of gcc
    mkdir -pv "${fakeroot_dir}/tools/lib/${_pkgbase}/$LFS_TGT/${pkgver}/include-fixed"
    cat "${build_dir}/${_pkgbase}-${pkgver}/gcc/"{limitx.h,glimits.h,limity.h} > "${fakeroot_dir}/tools/lib/${_pkgbase}/$LFS_TGT/${pkgver}/include-fixed/limits.h"

    #don't overwrite info pages
    rm "${fakeroot_dir}/tools/share/info/dir"
}

lfs_me_postinstall() {
    echo "Adding info pages"
    for info_page in ${_info_pages[@]}
    do
        install-info "/tools/share/info/${info_page}" /tools/share/info/dir
    done
}

lfs_me_preremove() {
    echo "Removing info pages"
    for info_page in ${_info_pages[@]}
    do
        install-info --delete "/tools/share/info/${info_page}" /tools/share/info/dir
    done
}

# vim:set syntax=sh et:
